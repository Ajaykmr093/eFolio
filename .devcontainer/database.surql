
-- ------------------------------
-- -- Export generated by Surrealist on 2024-04-24T18:24:45.388Z
-- ------------------------------


-- ------------------------------
-- OPTION
-- ------------------------------

OPTION IMPORT;

-- ------------------------------
-- FUNCTIONS
-- ------------------------------

DEFINE FUNCTION fn::approved_seller_from_auth() { {
LET $seller = fn::seller_from_auth();
LET $approved = (SELECT VALUE ((<-applies_to_become.applicationStatus)[0] == 'approved') FROM ONLY $seller);
RETURN IF $approved THEN $seller ELSE NONE END;
} } COMMENT 'Approved seller id of currently authenticated user. If seller is not approved then NONE is returned.' PERMISSIONS WHERE $auth != NONE;
DEFINE FUNCTION fn::seller_from_auth() { { RETURN (SELECT VALUE (->applies_to_become->seller)[0] FROM ONLY $auth); } } COMMENT 'Seller id of currently authenticated user.' PERMISSIONS WHERE $auth != NONE;

-- ------------------------------
-- SCOPES
-- ------------------------------

DEFINE SCOPE seller SESSION 1w SIGNUP ({
LET $userPassword = (SELECT VALUE password FROM ONLY $user);
IF (!crypto::argon2::compare($userPassword, $password)) { THROW 'Invalid credentials.'; };
LET $existingApplication = (SELECT id FROM ONLY applies_to_become WHERE in = $user LIMIT 1);
IF ($existingApplication != NONE) { THROW 'Seller profile already exists.'; };
LET $seller = (CREATE ONLY seller CONTENT { email: $email, name: $name });
LET $application = (RELATE $user -> applies_to_become -> $seller SET document = $doc);
RETURN $application;
});
DEFINE SCOPE user SESSION 1w SIGNUP ({
LET $existingUser = (SELECT id FROM ONLY user WHERE email = $email LIMIT 1);
IF ($existingUser != NONE) { THROW 'Email already exists.'; };
RETURN (CREATE user CONTENT { email: $email, name: $name, password: crypto::argon2::generate($password), username: $username });
}) SIGNIN ({
LET $user = (SELECT * FROM ONLY user WHERE (id = string::lowercase($uid) OR email = string::lowercase($uid) OR username = string::lowercase($uid)) AND crypto::argon2::compare(password, $password) LIMIT 1);
IF ($user == NONE) { THROW 'Invalid credentials.'; };
RETURN $user;
});

-- ------------------------------
-- TABLE: applies_to_become
-- ------------------------------

DEFINE TABLE applies_to_become TYPE ANY SCHEMAFULL PERMISSIONS FOR select WHERE in == $auth OR $auth.isAdmin, FOR create NONE, FOR update WHERE $auth.isAdmin, FOR delete WHERE in == $auth AND applicationStatus == 'rejected';

DEFINE FIELD applicationStatus ON applies_to_become TYPE string DEFAULT 'pending' PERMISSIONS FOR select WHERE in == $auth OR $auth.isAdmin, FOR create, delete NONE, FOR update WHERE $auth.isAdmin;
DEFINE FIELD applicationTime ON applies_to_become TYPE datetime VALUE time::now() PERMISSIONS FOR select WHERE in == $auth OR $auth.isAdmin, FOR create, update, delete NONE;
DEFINE FIELD document ON applies_to_become TYPE string PERMISSIONS FOR select WHERE in == $auth OR $auth.isAdmin, FOR create, update, delete NONE;
DEFINE FIELD in ON applies_to_become TYPE record<user> PERMISSIONS FOR select WHERE in == $auth OR $auth.isAdmin, FOR create, update, delete NONE;
DEFINE FIELD out ON applies_to_become TYPE record<seller> PERMISSIONS FOR select WHERE in == $auth OR $auth.isAdmin, FOR create, update, delete NONE;
DEFINE FIELD remark ON applies_to_become TYPE option<string> PERMISSIONS FOR select WHERE in == $auth OR $auth.isAdmin, FOR create, delete NONE, FOR update WHERE $auth.isAdmin;

DEFINE INDEX unique_seller ON applies_to_become FIELDS out UNIQUE;
DEFINE INDEX unique_user ON applies_to_become FIELDS in UNIQUE;

-- ------------------------------
-- TABLE: author
-- ------------------------------

DEFINE TABLE author TYPE ANY SCHEMAFULL PERMISSIONS FOR select FULL, FOR create WHERE fn::approved_seller_from_auth() != NONE, FOR update WHERE $auth.isAdmin, FOR delete NONE;

DEFINE FIELD about ON author TYPE string PERMISSIONS FOR select FULL, FOR create WHERE fn::approved_seller_from_auth() != NONE, FOR update WHERE $auth.isAdmin, FOR delete NONE;
DEFINE FIELD addedBy ON author TYPE record<seller> DEFAULT fn::approved_seller_from_auth() ASSERT $value == fn::approved_seller_from_auth() PERMISSIONS FOR select FULL, FOR create WHERE $this == fn::approved_seller_from_auth(), FOR update, delete NONE;
DEFINE FIELD isVerified ON author TYPE bool DEFAULT false ASSERT $event == create AND $input == NONE PERMISSIONS FOR select FULL, FOR create WHERE fn::approved_seller_from_auth() != NONE, FOR update WHERE $auth.isAdmin, FOR delete NONE;
DEFINE FIELD name ON author TYPE string PERMISSIONS FOR select FULL, FOR create WHERE fn::approved_seller_from_auth() != NONE, FOR update WHERE $auth.isAdmin, FOR delete NONE;
DEFINE FIELD photo ON author TYPE string PERMISSIONS FOR select FULL, FOR create WHERE fn::approved_seller_from_auth() != NONE, FOR update WHERE $auth.isAdmin, FOR delete NONE;

-- ------------------------------
-- TABLE: book
-- ------------------------------

DEFINE TABLE book TYPE ANY SCHEMAFULL PERMISSIONS FOR select FULL, FOR create WHERE fn::approved_seller_from_auth() != NONE, FOR update WHERE seller == fn::approved_seller_from_auth(), FOR delete NONE;

DEFINE FIELD author ON book TYPE record<author> PERMISSIONS FOR select FULL, FOR create WHERE fn::approved_seller_from_auth() != NONE, FOR update WHERE seller == fn::approved_seller_from_auth(), FOR delete NONE;
DEFINE FIELD bookType ON book TYPE string PERMISSIONS FOR select FULL, FOR create WHERE fn::approved_seller_from_auth() != NONE, FOR update WHERE seller == fn::approved_seller_from_auth(), FOR delete NONE;
DEFINE FIELD bookUrl ON book TYPE string PERMISSIONS FOR select WHERE $auth == (SELECT VALUE (<-bought<-user)[0] FROM ONLY $this.id LIMIT 1), FOR create WHERE fn::approved_seller_from_auth() != NONE, FOR update WHERE seller == fn::approved_seller_from_auth(), FOR delete NONE;
DEFINE FIELD coverUrl ON book TYPE string PERMISSIONS FOR select FULL, FOR create WHERE fn::approved_seller_from_auth() != NONE, FOR update WHERE seller == fn::approved_seller_from_auth(), FOR delete NONE;
DEFINE FIELD description ON book TYPE string PERMISSIONS FOR select FULL, FOR create WHERE fn::approved_seller_from_auth() != NONE, FOR update WHERE seller == fn::approved_seller_from_auth(), FOR delete NONE;
DEFINE FIELD discount ON book TYPE number PERMISSIONS FOR select FULL, FOR create WHERE fn::approved_seller_from_auth() != NONE, FOR update WHERE seller == fn::approved_seller_from_auth(), FOR delete NONE;
DEFINE FIELD isbn ON book TYPE string PERMISSIONS FOR select FULL, FOR create WHERE fn::approved_seller_from_auth() != NONE, FOR update WHERE seller == fn::approved_seller_from_auth(), FOR delete NONE;
DEFINE FIELD language ON book TYPE string PERMISSIONS FOR select FULL, FOR create WHERE fn::approved_seller_from_auth() != NONE, FOR update WHERE seller == fn::approved_seller_from_auth(), FOR delete NONE;
DEFINE FIELD price ON book TYPE float PERMISSIONS FOR select FULL, FOR create WHERE fn::approved_seller_from_auth() != NONE, FOR update WHERE seller == fn::approved_seller_from_auth(), FOR delete NONE;
DEFINE FIELD publication ON book TYPE string PERMISSIONS FOR select FULL, FOR create WHERE fn::approved_seller_from_auth() != NONE, FOR update WHERE seller == fn::approved_seller_from_auth(), FOR delete NONE;
DEFINE FIELD publishDate ON book TYPE datetime PERMISSIONS FOR select FULL, FOR create WHERE fn::approved_seller_from_auth() != NONE, FOR update WHERE seller == fn::approved_seller_from_auth(), FOR delete NONE;
DEFINE FIELD sampleUrl ON book TYPE string PERMISSIONS FOR select FULL, FOR create WHERE fn::approved_seller_from_auth() != NONE, FOR update WHERE seller == fn::approved_seller_from_auth(), FOR delete NONE;
DEFINE FIELD seller ON book TYPE record<seller> DEFAULT fn::approved_seller_from_auth() ASSERT $value == fn::approved_seller_from_auth() PERMISSIONS FOR create, select FULL, FOR update, delete NONE;
DEFINE FIELD title ON book TYPE string PERMISSIONS FOR select FULL, FOR create WHERE fn::approved_seller_from_auth() != NONE, FOR update WHERE seller == fn::approved_seller_from_auth(), FOR delete NONE;
DEFINE FIELD totalPages ON book TYPE number PERMISSIONS FOR select FULL, FOR create WHERE fn::approved_seller_from_auth() != NONE, FOR update WHERE seller == fn::approved_seller_from_auth(), FOR delete NONE;

-- ------------------------------
-- TABLE: bought
-- ------------------------------

DEFINE TABLE bought TYPE ANY SCHEMAFULL PERMISSIONS FOR select FULL, FOR create, update, delete NONE;

DEFINE FIELD boughtAt ON bought TYPE datetime VALUE time::now() PERMISSIONS FOR select FULL, FOR create, update, delete NONE;
DEFINE FIELD in ON bought TYPE record<user> PERMISSIONS FOR select FULL, FOR create, update, delete NONE;
DEFINE FIELD out ON bought TYPE record<book> PERMISSIONS FOR select FULL, FOR create, update, delete NONE;
DEFINE FIELD price ON bought TYPE float PERMISSIONS FOR select FULL, FOR create, update, delete NONE;

-- ------------------------------
-- TABLE: seller
-- ------------------------------

DEFINE TABLE seller TYPE ANY SCHEMAFULL PERMISSIONS FOR select FULL, FOR create, update, delete NONE;

DEFINE FIELD email ON seller TYPE string PERMISSIONS FOR select FULL, FOR create, update, delete NONE;
DEFINE FIELD name ON seller TYPE string PERMISSIONS FOR select FULL, FOR create, update, delete NONE;

-- ------------------------------
-- TABLE: user
-- ------------------------------

DEFINE TABLE user TYPE ANY SCHEMAFULL PERMISSIONS FOR select WHERE id == $auth.id, FOR create, update, delete NONE;

DEFINE FIELD createdAt ON user TYPE datetime VALUE time::now() PERMISSIONS FOR select WHERE id == $auth.id, FOR create, update, delete NONE;
DEFINE FIELD email ON user TYPE string PERMISSIONS FOR select WHERE id == $auth.id, FOR create, update, delete NONE;
DEFINE FIELD isAdmin ON user TYPE option<bool> PERMISSIONS FOR select WHERE id == $auth.id, FOR create, update, delete NONE;
DEFINE FIELD name ON user TYPE object PERMISSIONS FOR select WHERE id == $auth.id, FOR create, update, delete NONE;
DEFINE FIELD name.first ON user TYPE string PERMISSIONS FOR select WHERE id == $auth.id, FOR create, update, delete NONE;
DEFINE FIELD name.full ON user TYPE string DEFAULT string::join(' ', name.first, name.last) PERMISSIONS FOR select WHERE id == $auth.id, FOR create, update, delete NONE;
DEFINE FIELD name.last ON user TYPE string PERMISSIONS FOR select WHERE id == $auth.id, FOR create, update, delete NONE;
DEFINE FIELD password ON user TYPE string PERMISSIONS NONE;
DEFINE FIELD seller_profile ON user TYPE option<record<seller>> PERMISSIONS FOR select WHERE id == $auth.id, FOR create, update, delete NONE;
DEFINE FIELD username ON user TYPE string PERMISSIONS FOR select WHERE id == $auth.id, FOR create, update, delete NONE;

DEFINE INDEX email ON user FIELDS email UNIQUE;
DEFINE INDEX username ON user FIELDS username UNIQUE;

-- ------------------------------
-- TABLE: username_lookup
-- ------------------------------

DEFINE TABLE username_lookup TYPE ANY SCHEMALESS AS SELECT username FROM user PERMISSIONS FOR select FULL, FOR create, update, delete NONE;